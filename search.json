[{"path":"https://pachterlab.github.io/alabaster.sfe/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Lambda Moses Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/articles/Overview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Save/load SpatialFeatureExperiment to/from file","text":"SpatialFeatureExperiment (SFE) class extends SpatialExperiment foreground spatial aspect data incorporating Simple Feature geometries geometric operations whole object like multi-layered map. also introduces new image classes support geospatial raster tradition (terra package) image processing package (EBImage package). spatial -omics data growing size, components SFE object loaded memory unless necessary. includes gene count matrix assays DelayedArrays BioFormats images whose metadata loaded memory, well transcript spot geometries smFISH-based technologies cases. plan expand memory functionalities near future. result, SFE object saved RDS shared others, often memory components break original file unavailable tied absolute path. goal alabaster.sfe make SFE objects portable sharing, avoid recomputing affine transformations spatial statistics reading data original output Space Ranger. contribution alabaster suite packages ArtifactDB. Another goal interoperability Python languages goal ArtifactDB.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/articles/Overview.html","id":"xenium-demo","dir":"Articles","previous_headings":"","what":"Xenium demo","title":"Save/load SpatialFeatureExperiment to/from file","text":"show small example subset Xenium data, basic spatial analyses. Global spatial statistics gene expression stored rowData.  Global spatial statistics colData can accessed colFeatureData() Local spatial statistics stored field localResults.  SFE object can get quite bit complicated SpatialExperiment results spatial analyses stored within object ease bookkeeping plotting. spatial analysis results save disk alabaster.sfe. image OME-TIFF metadata memory. highest resolution necessary loaded memory plotting, part plotted loaded.  addition, can affine transform object. Say rotate .  Now save object disk. SpatialExperiment method called first, calls new methods save images implemented alabaster.sfe. see original image copied directory save SFE object. Geometries saved GeoParquet files, Apache Arrow designed efficient interoperable languages. also might open way memory geometric operations. However, note writing, GeoParquet format still development may change. Now suppose move save directory, just like sharing data along spatial analyses transformations.  image still works. spatial analysis results read well.","code":"library(alabaster.sfe) library(Voyager) library(SFEData) library(SingleCellExperiment) library(scater) library(sf) library(fs) library(spdep) set.SubgraphOption(FALSE) fp <- tempfile() x2 <- XeniumOutput(\"v2\", file_path = file.path(fp, \"xenium2\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp4ywLZc/file105b22df17189/xenium2/xenium2 sfe <- readXenium(x2, add_molecules = TRUE) #> >>> Must use gene symbols as row names when adding transcript spots. #> >>> Cell segmentations are found in `.parquet` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making MULTIPOLYGON nuclei geometries #> >>> Making POLYGON cell geometries #> Sanity checks on cell segmentation polygons: #> >>> ..found 132 cells with (nested) polygon lists #> >>> ..applying filtering #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.parquet` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 6272 cells with counts > 0 #> >>> filtering nucSeg geometries to match 6158 cells with counts > 0 #> >>> Reading transcript coordinates #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk #> >>> Total of 116 features/genes with no transcript detected or `min_phred` < 20 are removed from SFE object #> >>> To keep all features -> set `min_phred = NULL` colData(sfe) #> DataFrame with 6272 rows and 9 columns #>            transcript_counts control_probe_counts control_codeword_counts #>                    <integer>            <integer>               <integer> #> abclkehb-1                26                    0                       0 #> abcnopgp-1                35                    0                       0 #> abcobdon-1                39                    0                       0 #> abcohgbl-1                45                    0                       0 #> abcoochm-1                61                    0                       0 #> ...                      ...                  ...                     ... #> odmfjplg-1                12                    0                       0 #> odmfpjop-1                 3                    0                       0 #> odmglico-1                40                    0                       0 #> odmgoega-1                25                    0                       0 #> odmgojlc-1                13                    0                       0 #>            unassigned_codeword_counts deprecated_codeword_counts total_counts #>                             <integer>                  <integer>    <integer> #> abclkehb-1                          0                          0           26 #> abcnopgp-1                          0                          0           35 #> abcobdon-1                          0                          0           39 #> abcohgbl-1                          0                          0           45 #> abcoochm-1                          0                          0           61 #> ...                               ...                        ...          ... #> odmfjplg-1                          0                          0           12 #> odmfpjop-1                          0                          0            3 #> odmglico-1                          0                          0           40 #> odmgoega-1                          0                          0           25 #> odmgojlc-1                          0                          0           13 #>            cell_area nucleus_area   sample_id #>            <numeric>    <numeric> <character> #> abclkehb-1   39.6923      18.9656    sample01 #> abcnopgp-1   60.7352      29.5322    sample01 #> abcobdon-1   55.4519      20.9977    sample01 #> abcohgbl-1   79.9266      24.4295    sample01 #> abcoochm-1   70.6244      34.1833    sample01 #> ...              ...          ...         ... #> odmfjplg-1  63.03813     29.35156    sample01 #> odmfpjop-1   9.16672      9.16672    sample01 #> odmglico-1  82.54563     16.07563    sample01 #> odmgoega-1 112.84547      5.73484    sample01 #> odmgojlc-1  47.00766     12.19219    sample01 colGraph(sfe, \"knn5\") <- findSpatialNeighbors(sfe, method = \"knearneigh\", k = 5) sfe <- logNormCounts(sfe, size_factors = sfe$cell_area) sfe <- runMoransI(sfe, colGraphName = \"knn5\") sfe <- colDataMoransI(sfe, features = c(\"transcript_counts\", \"cell_area\")) top_moran <- rownames(sfe)[which.max(rowData(sfe)$moran_sample01)] sfe <- runUnivariate(sfe, type = \"localmoran\", features = top_moran) rowData(sfe) #> DataFrame with 398 rows and 5 columns #>                                             ID                 Symbol #>                                    <character>            <character> #> ABCC11                         ENSG00000121270                 ABCC11 #> ACE2                           ENSG00000130234                   ACE2 #> ACKR1                          ENSG00000213088                  ACKR1 #> ACTA2                          ENSG00000107796                  ACTA2 #> ACTG2                          ENSG00000163017                  ACTG2 #> ...                                        ...                    ... #> UnassignedCodeword_0461 UnassignedCodeword_0.. UnassignedCodeword_0.. #> UnassignedCodeword_0469 UnassignedCodeword_0.. UnassignedCodeword_0.. #> UnassignedCodeword_0479 UnassignedCodeword_0.. UnassignedCodeword_0.. #> UnassignedCodeword_0488 UnassignedCodeword_0.. UnassignedCodeword_0.. #> UnassignedCodeword_0497 UnassignedCodeword_0.. UnassignedCodeword_0.. #>                                        Type moran_sample01 K_sample01 #>                                 <character>      <numeric>  <numeric> #> ABCC11                      Gene Expression    -0.00108527 1965.06388 #> ACE2                        Gene Expression     0.35448582   25.74963 #> ACKR1                       Gene Expression     0.13760601  140.94728 #> ACTA2                       Gene Expression     0.12094896   11.71618 #> ACTG2                       Gene Expression     0.27008958    8.84807 #> ...                                     ...            ...        ... #> UnassignedCodeword_0461 Unassigned Codeword   -0.000127571       6270 #> UnassignedCodeword_0469 Unassigned Codeword   -0.000127571       6270 #> UnassignedCodeword_0479 Unassigned Codeword   -0.000159464       6270 #> UnassignedCodeword_0488 Unassigned Codeword   -0.000287036       6270 #> UnassignedCodeword_0497 Unassigned Codeword   -0.000191357       6270 plotSpatialFeature(sfe, features = top_moran, colGeometryName = \"cellSeg\") colFeatureData(sfe) #> DataFrame with 10 rows and 2 columns #>                            moran_sample01 K_sample01 #>                                 <numeric>  <numeric> #> transcript_counts                0.385497    24.5122 #> control_probe_counts                   NA         NA #> control_codeword_counts                NA         NA #> unassigned_codeword_counts             NA         NA #> deprecated_codeword_counts             NA         NA #> total_counts                           NA         NA #> cell_area                        0.243229    17.2938 #> nucleus_area                           NA         NA #> sample_id                              NA         NA #> sizeFactor                             NA         NA plotLocalResult(sfe, name = \"localmoran\", features = top_moran, divergent = TRUE,                 colGeometryName = \"cellSeg\", diverge_center = 0) plotImage(sfe, image_id = \"morphology_focus\", channel = 3:1, normalize_channels = TRUE) sfe <- SpatialFeatureExperiment::rotate(sfe, degrees = 30) plotGeometry(sfe, colGeometryName = \"nucSeg\", fill = FALSE,               image_id = \"morphology_focus\",              channel = 3:1, normalize_channels = TRUE, dark = TRUE) fsave <- file.path(fp, \"sfe_save\") saveObject(sfe, fsave) #> >>> Saving SpatialExperiment #> >>> Saving colgeometries #> >>> Saving rowgeometries #> >>> Saving localResults #> >>> Saving spatial graphs dir_tree(fsave) #> /tmp/Rtmp4ywLZc/file105b22df17189/sfe_save #> ├── OBJECT #> ├── assays #> │   ├── 0 #> │   │   ├── OBJECT #> │   │   └── matrix.h5 #> │   ├── 1 #> │   │   ├── OBJECT #> │   │   └── matrix.h5 #> │   └── names.json #> ├── colgeometries #> │   ├── 0 #> │   │   ├── OBJECT #> │   │   └── map.parquet #> │   ├── 1 #> │   │   ├── OBJECT #> │   │   └── map.parquet #> │   ├── 2 #> │   │   ├── OBJECT #> │   │   └── map.parquet #> │   └── names.json #> ├── column_data #> │   ├── OBJECT #> │   ├── basic_columns.h5 #> │   ├── column_annotations #> │   │   ├── OBJECT #> │   │   └── basic_columns.h5 #> │   └── other_annotations #> │       ├── OBJECT #> │       └── list_contents.json.gz #> ├── coordinates #> │   ├── OBJECT #> │   └── array.h5 #> ├── images #> │   ├── 0 #> │   │   ├── OBJECT #> │   │   └── image #> │   │       ├── morphology_focus_0000.ome.tif #> │   │       ├── morphology_focus_0001.ome.tif #> │   │       ├── morphology_focus_0002.ome.tif #> │   │       └── morphology_focus_0003.ome.tif #> │   └── mapping.h5 #> ├── local_results #> │   ├── OBJECT #> │   ├── basic_columns.h5 #> │   ├── other_annotations #> │   │   ├── OBJECT #> │   │   └── list_contents.json.gz #> │   └── other_columns #> │       └── 0 #> │           ├── OBJECT #> │           ├── basic_columns.h5 #> │           └── other_columns #> │               └── 0 #> │                   ├── OBJECT #> │                   └── basic_columns.h5 #> ├── other_data #> │   ├── OBJECT #> │   └── list_contents.json.gz #> ├── row_data #> │   ├── OBJECT #> │   ├── basic_columns.h5 #> │   └── other_annotations #> │       ├── OBJECT #> │       └── list_contents.json.gz #> ├── rowgeometries #> │   ├── 0 #> │   │   ├── OBJECT #> │   │   └── map.parquet #> │   └── names.json #> └── spatial_graphs #>     ├── 0 #>     │   └── col #>     │       ├── 0 #>     │       │   ├── OBJECT #>     │       │   ├── matrix.h5 #>     │       │   └── method #>     │       │       ├── OBJECT #>     │       │       └── list_contents.json.gz #>     │       └── names.json #>     └── names.json fsave2 <- file.path(fp, \"meow\") file.rename(fsave, fsave2) #> [1] TRUE sfe2 <- readObject(fsave2) #> >>> Reading SpatialExperiment #> >>> Reading colgeometries #> >>> Reading rowgeometries #> >>> Reading spatial graphs #> >>> Reading localResults plotImage(sfe2, image_id = \"morphology_focus\", channel = 3:1, normalize_channels = TRUE) colFeatureData(sfe2) #> DataFrame with 10 rows and 2 columns #>                            moran_sample01 K_sample01 #>                                 <numeric>  <numeric> #> transcript_counts                0.385497    24.5122 #> control_probe_counts                   NA         NA #> control_codeword_counts                NA         NA #> unassigned_codeword_counts             NA         NA #> deprecated_codeword_counts             NA         NA #> total_counts                           NA         NA #> cell_area                        0.243229    17.2938 #> nucleus_area                           NA         NA #> sample_id                              NA         NA #> sizeFactor                             NA         NA"},{"path":"https://pachterlab.github.io/alabaster.sfe/articles/Overview.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Save/load SpatialFeatureExperiment to/from file","text":"","code":"sessionInfo() #> R Under development (unstable) (2025-02-02 r87676) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8          LC_NUMERIC=C              #>  [3] LC_TIME=C.UTF-8           LC_COLLATE=C.UTF-8        #>  [5] LC_MONETARY=C.UTF-8       LC_MESSAGES=C.UTF-8       #>  [7] LC_PAPER=C.UTF-8          LC_NAME=C.UTF-8           #>  [9] LC_ADDRESS=C.UTF-8        LC_TELEPHONE=C.UTF-8      #> [11] LC_MEASUREMENT=C.UTF-8    LC_IDENTIFICATION=C.UTF-8 #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] spdep_1.3-10                   spData_2.3.4                   #>  [3] fs_1.6.5                       sf_1.0-19                      #>  [5] scater_1.35.1                  ggplot2_3.5.1                  #>  [7] scuttle_1.17.0                 SingleCellExperiment_1.29.1    #>  [9] SummarizedExperiment_1.37.0    Biobase_2.67.0                 #> [11] GenomicRanges_1.59.1           GenomeInfoDb_1.43.4            #> [13] IRanges_2.41.2                 S4Vectors_0.45.2               #> [15] BiocGenerics_0.53.6            generics_0.1.3                 #> [17] MatrixGenerics_1.19.1          matrixStats_1.5.0              #> [19] SFEData_1.9.1                  Voyager_1.9.2                  #> [21] alabaster.sfe_0.99.3           alabaster.base_1.7.5           #> [23] SpatialFeatureExperiment_1.9.7 BiocStyle_2.35.0               #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.5.0             filelock_1.0.3            #>   [3] bitops_1.0-9              tibble_3.2.1              #>   [5] R.oo_1.27.0               lifecycle_1.0.4           #>   [7] edgeR_4.5.2               lattice_0.22-6            #>   [9] MASS_7.3-64               magrittr_2.0.3            #>  [11] limma_3.63.3              sass_0.4.9                #>  [13] rmarkdown_2.29            jquerylib_0.1.4           #>  [15] yaml_2.3.10               sp_2.2-0                  #>  [17] RColorBrewer_1.1-3        DBI_1.2.3                 #>  [19] multcomp_1.4-28           abind_1.4-8               #>  [21] spatialreg_1.3-6          purrr_1.0.2               #>  [23] R.utils_2.12.3            RCurl_1.98-1.16           #>  [25] TH.data_1.1-3             rappdirs_0.3.3            #>  [27] sandwich_3.1-1            GenomeInfoDbData_1.2.13   #>  [29] ggrepel_0.9.6             irlba_2.3.5.1             #>  [31] alabaster.sce_1.7.0       terra_1.8-15              #>  [33] units_0.8-5               RSpectra_0.16-2           #>  [35] dqrng_0.4.1               pkgdown_2.1.1             #>  [37] DelayedMatrixStats_1.29.1 codetools_0.2-20          #>  [39] DropletUtils_1.27.2       DelayedArray_0.33.4       #>  [41] xml2_1.3.6                tidyselect_1.2.1          #>  [43] UCSC.utils_1.3.1          memuse_4.2-3              #>  [45] farver_2.1.2              viridis_0.6.5             #>  [47] ScaledMatrix_1.15.0       BiocFileCache_2.15.1      #>  [49] jsonlite_1.8.9            BiocNeighbors_2.1.2       #>  [51] e1071_1.7-16              survival_3.8-3            #>  [53] systemfonts_1.2.1         tools_4.5.0               #>  [55] ggnewscale_0.5.0          ragg_1.3.3                #>  [57] sfarrow_0.4.1             Rcpp_1.0.14               #>  [59] glue_1.8.0                gridExtra_2.3             #>  [61] SparseArray_1.7.4         xfun_0.50                 #>  [63] EBImage_4.49.0            dplyr_1.1.4               #>  [65] HDF5Array_1.35.11         withr_3.0.2               #>  [67] alabaster.spatial_1.7.1   BiocManager_1.30.25       #>  [69] fastmap_1.2.0             boot_1.3-31               #>  [71] rhdf5filters_1.19.0       bluster_1.17.0            #>  [73] rsvd_1.0.5                digest_0.6.37             #>  [75] mime_0.12                 R6_2.5.1                  #>  [77] textshaping_1.0.0         colorspace_2.1-1          #>  [79] wk_0.9.4                  LearnBayes_2.15.1         #>  [81] RBioFormats_1.7.0         jpeg_0.1-10               #>  [83] RSQLite_2.3.9             R.methodsS3_1.8.2         #>  [85] h5mread_0.99.4            data.table_1.16.4         #>  [87] class_7.3-23              httr_1.4.7                #>  [89] htmlwidgets_1.6.4         S4Arrays_1.7.1            #>  [91] pkgconfig_2.0.3           scico_1.5.0               #>  [93] rJava_1.0-11              gtable_0.3.6              #>  [95] blob_1.2.4                XVector_0.47.2            #>  [97] htmltools_0.5.8.1         bookdown_0.42             #>  [99] fftwtools_0.9-11          scales_1.3.0              #> [101] alabaster.matrix_1.7.6    png_0.1-8                 #> [103] SpatialExperiment_1.17.0  knitr_1.49                #> [105] rjson_0.2.23              coda_0.19-4.1             #> [107] nlme_3.1-167              curl_6.2.0                #> [109] proxy_0.4-27              cachem_1.1.0              #> [111] zoo_1.8-12                rhdf5_2.51.2              #> [113] BiocVersion_3.21.1        KernSmooth_2.23-26        #> [115] vipor_0.4.7               parallel_4.5.0            #> [117] arrow_18.1.0.1            AnnotationDbi_1.69.0      #> [119] desc_1.4.3                s2_1.1.7                  #> [121] pillar_1.10.1             grid_4.5.0                #> [123] alabaster.schemas_1.7.0   vctrs_0.6.5               #> [125] BiocSingular_1.23.0       dbplyr_2.5.0              #> [127] beachmat_2.23.6           sfheaders_0.4.4           #> [129] cluster_2.1.8             beeswarm_0.4.0            #> [131] evaluate_1.0.3            zeallot_0.1.0             #> [133] magick_2.8.5              mvtnorm_1.3-3             #> [135] cli_3.6.3                 locfit_1.5-9.10           #> [137] compiler_4.5.0            rlang_1.1.5               #> [139] crayon_1.5.3              labeling_0.4.3            #> [141] classInt_0.4-11           ggbeeswarm_0.7.2          #> [143] viridisLite_0.4.2         alabaster.se_1.7.0        #> [145] deldir_2.0-4              BiocParallel_1.41.0       #> [147] assertthat_0.2.1          Biostrings_2.75.3         #> [149] munsell_0.5.1             tiff_0.1-12               #> [151] Matrix_1.7-2              ExperimentHub_2.15.0      #> [153] patchwork_1.3.0           sparseMatrixStats_1.19.0  #> [155] bit64_4.6.0-1             Rhdf5lib_1.29.0           #> [157] KEGGREST_1.47.0           statmod_1.5.0             #> [159] alabaster.ranges_1.7.0    AnnotationHub_3.15.0      #> [161] igraph_2.1.4              memoise_2.0.1             #> [163] bslib_0.9.0               bit_4.5.0.1"},{"path":"https://pachterlab.github.io/alabaster.sfe/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lambda Moses. Author, maintainer.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moses L (2025). alabaster.sfe: Language agnostic disk serialization SpatialFeatureExperiment. R package version 0.99.3, https://pachterlab.github.io/alabaster.sfe/.","code":"@Manual{,   title = {alabaster.sfe: Language agnostic on disk serialization of SpatialFeatureExperiment},   author = {Lambda Moses},   year = {2025},   note = {R package version 0.99.3},   url = {https://pachterlab.github.io/alabaster.sfe/}, }"},{"path":"https://pachterlab.github.io/alabaster.sfe/index.html","id":"alabastersfe","dir":"","previous_headings":"","what":"Language agnostic on disk serialization of SpatialFeatureExperiment","title":"Language agnostic on disk serialization of SpatialFeatureExperiment","text":"goal alabaster.sfe implement language agnostic format represent SpatialFeatureExperiment disk, existing alabaster packages ArtifactDB. serves formalize standardize files written disk SFE reformats smFISH transcript spots improve interoperability R Python implementations Voyager.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Language agnostic on disk serialization of SpatialFeatureExperiment","text":"can install development version alabaster.sfe GitHub : package submitted Bioconductor review","code":"# install.packages(\"devtools\") devtools::install_github(\"pachterlab/alabaster.sfe\")"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readBioFormatsImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Read BioFormatsImage from alabaster on disk representation — readBioFormatsImage","title":"Read BioFormatsImage from alabaster on disk representation — readBioFormatsImage","text":"Reads metadata imgSource point file within disk representation SFE. image moved BioFormatsImabe object longer work.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readBioFormatsImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read BioFormatsImage from alabaster on disk representation — readBioFormatsImage","text":"","code":"readBioFormatsImage(path, metadata = NULL, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readBioFormatsImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read BioFormatsImage from alabaster on disk representation — readBioFormatsImage","text":"path String containing path directory, created saveObject method. metadata Named list containing metadata object - importantly, type field controls dispatch correct loading function. NULL, automatically read readObjectFile(path). ... Ignored, used methods.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readBioFormatsImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read BioFormatsImage from alabaster on disk representation — readBioFormatsImage","text":"BioFormatsImage object SFE.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readBioFormatsImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read BioFormatsImage from alabaster on disk representation — readBioFormatsImage","text":"","code":"library(SFEData) fp <- tempfile() x1 <- XeniumOutput(dataset = \"v1\", file_path = file.path(fp, \"xenium1\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a247e7892/xenium1/xenium_lr  x2 <- XeniumOutput(\"v2\", file_path = file.path(fp, \"xenium2\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a247e7892/xenium2/xenium2   # Single file OME-TIFF fsave <- file.path(fp, \"bfi1\") sfe <- readXenium(x1) #> >>> Cell segmentations are found in `.csv` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making POLYGON geometries #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 16324 cells with counts > 0 #> >>> filtering nucSeg geometries to match 16324 cells with counts > 0 bfi <- getImg(sfe) bfi <- affineImg(bfi, M = matrix(c(cos(pi/6), sin(pi/6), -sin(pi/6), cos(pi/6)), nrow = 2),                   v = c(0,0)) saveObject(bfi, fsave) bfi2 <- readObject(fsave)  unlink(fsave, recursive = TRUE)  # Multi file OME-TIFF fsave <- file.path(fp, \"bfi2\") sfe <- readXenium(x2) #> >>> Cell segmentations are found in `.parquet` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making MULTIPOLYGON nuclei geometries #> >>> Making POLYGON cell geometries #> Sanity checks on cell segmentation polygons: #> >>> ..found 132 cells with (nested) polygon lists #> >>> ..applying filtering #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.parquet` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 6272 cells with counts > 0 #> >>> filtering nucSeg geometries to match 6158 cells with counts > 0 bfi <- getImg(sfe) saveObject(bfi, fsave) bfi2 <- readObject(fsave) unlink(fsave, recursive = TRUE)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readExtImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ExtImage from disk — readExtImage","title":"Read ExtImage from disk — readExtImage","text":"Read ExtImage disk","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readExtImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ExtImage from disk — readExtImage","text":"","code":"readExtImage(path, metadata = NULL, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readExtImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ExtImage from disk — readExtImage","text":"path String containing path directory, created saveObject method. metadata Named list containing metadata object - importantly, type field controls dispatch correct loading function. NULL, automatically read readObjectFile(path). ... Arguments passed readImage.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readExtImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ExtImage from disk — readExtImage","text":"ExtImage object SFE.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readExtImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read ExtImage from disk — readExtImage","text":"","code":"library(SFEData) fp <- tempfile() fsave <- file.path(fp, \"exi\") x1 <- XeniumOutput(dataset = \"v1\", file_path = file.path(fp, \"xenium1\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a5e6a9de2/xenium1/xenium_lr  sfe <- readXenium(x1) #> >>> Cell segmentations are found in `.csv` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making POLYGON geometries #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 16324 cells with counts > 0 #> >>> filtering nucSeg geometries to match 16324 cells with counts > 0 bfi <- getImg(sfe) exi <- toExtImage(bfi) #> Resolution subscript out of bound, reading the lowest resolution saveObject(exi, fsave) exi2 <- readObject(fsave) unlink(fsave, recursive = TRUE)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSF.html","id":null,"dir":"Reference","previous_headings":"","what":"Read sf from alabaster on disk representation — readSF","title":"Read sf from alabaster on disk representation — readSF","text":"Read GeoParquet file R. GeoParquet also work programming language supports arrow. Newer version GDAL Parquet driver strictly necessary geometry's WKB can converted whichever language specific object sfc R.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read sf from alabaster on disk representation — readSF","text":"","code":"readSF(path, metadata = NULL)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read sf from alabaster on disk representation — readSF","text":"path String containing path directory, created saveObject method. metadata Named list containing metadata object - importantly, type field controls dispatch correct loading function. NULL, automatically read readObjectFile(path).","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read sf from alabaster on disk representation — readSF","text":"sf data frame","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read sf from alabaster on disk representation — readSF","text":"","code":"library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE fp <- tempfile() df <- as.data.frame(matrix(rnorm(10), ncol = 2)) df <- st_as_sf(df, coords = names(df), crs = NA) saveObject(df, path = fp) df2 <- readObject(fp)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SpatRaster from alabaster on disk representation — readSpatRaster","title":"Read SpatRaster from alabaster on disk representation — readSpatRaster","text":"terra::rast; function also reads metadata file.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SpatRaster from alabaster on disk representation — readSpatRaster","text":"","code":"readSpatRaster(path, metadata = NULL, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SpatRaster from alabaster on disk representation — readSpatRaster","text":"path String containing path directory, created saveObject method. metadata Named list containing metadata object - importantly, type field controls dispatch correct loading function. NULL, automatically read readObjectFile(path). ... Arguments passed rast, character method.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SpatRaster from alabaster on disk representation — readSpatRaster","text":"SpatRasterImage object SFE.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read SpatRaster from alabaster on disk representation — readSpatRaster","text":"","code":"library(SFEData) fp <- tempfile() fn <- file.path(fp, \"vizgen\") d <- VizgenOutput(dataset = \"cellpose\", file_path = fn) #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a60c9c747/vizgen/vizgen_cellbound_Cellpose  suppressWarnings(sfe <- readVizgen(d)) #> >>> 1 `.parquet` files exist: #> /tmp/Rtmp6uS36k/file1043a60c9c747/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> using -> /tmp/Rtmp6uS36k/file1043a60c9c747/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> Cell segmentations are found in `.parquet` file #> Sanity checks on cell segmentation polygons: #> >>> ..found 1 cells with (nested) polygon lists #> >>> ..applying filtering #> >>> Casting MULTIPOLYGON geometry to POLYGON #> >>> Checking polygon validity img <- getImg(sfe) class(img) #> [1] \"SpatRasterImage\" #> attr(,\"package\") #> [1] \"SpatialFeatureExperiment\" fsave <- file.path(fp, \"img\") saveObject(img, fsave) img2 <- readObject(fsave)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatialFeatureExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SFE object from alabaster on disk representation — readSpatialFeatureExperiment","title":"Read SFE object from alabaster on disk representation — readSpatialFeatureExperiment","text":"Read SFE object alabaster disk representation","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatialFeatureExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SFE object from alabaster on disk representation — readSpatialFeatureExperiment","text":"","code":"readSpatialFeatureExperiment(path, metadata = NULL, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatialFeatureExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SFE object from alabaster on disk representation — readSpatialFeatureExperiment","text":"path String containing path directory, created saveObject method. metadata Named list containing metadata object - importantly, type field controls dispatch correct loading function. NULL, automatically read readObjectFile(path). ... arguments pass individual methods.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatialFeatureExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SFE object from alabaster on disk representation — readSpatialFeatureExperiment","text":"SpatialFeatureExperiment object","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/readSpatialFeatureExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read SFE object from alabaster on disk representation — readSpatialFeatureExperiment","text":"","code":"library(SFEData) fp <- tempfile() fn <- file.path(fp, \"vizgen\") d <- VizgenOutput(dataset = \"cellpose\", file_path = fn) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a4d291bac/vizgen/vizgen_cellbound_Cellpose  suppressWarnings(sfe <- readVizgen(d)) #> >>> 1 `.parquet` files exist: #> /tmp/Rtmp6uS36k/file1043a4d291bac/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> using -> /tmp/Rtmp6uS36k/file1043a4d291bac/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> Cell segmentations are found in `.parquet` file #> Sanity checks on cell segmentation polygons: #> >>> ..found 1 cells with (nested) polygon lists #> >>> ..applying filtering #> >>> Casting MULTIPOLYGON geometry to POLYGON #> >>> Checking polygon validity fsave <- file.path(fp, \"sfe_save\") saveObject(sfe, fsave) #> >>> Saving SpatialExperiment #> >>> Saving colgeometries sfe2 <- readObject(fsave) #> >>> Reading SpatialExperiment #> >>> Reading colgeometries"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-BioFormatsImage-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Save BioFormatsImage for alabaster — saveObject,BioFormatsImage-method","title":"Save BioFormatsImage for alabaster — saveObject,BioFormatsImage-method","text":"function copies original file pre-defined location within directory stores disk representation SFE object data sharing. Since BioFormatsImage essentially just metadata memory never loads image memory (image loaded memory becomes ExtImage), original image moved, BioFormatsImage object longer work, pre-defined location important. function also saves metadata, includes spatial extent affine transformations.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-BioFormatsImage-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save BioFormatsImage for alabaster — saveObject,BioFormatsImage-method","text":"","code":"# S4 method for class 'BioFormatsImage' saveObject(x, path, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-BioFormatsImage-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save BioFormatsImage for alabaster — saveObject,BioFormatsImage-method","text":"x Bioconductor object specified class. path String containing path directory save x. ... Ignored","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-BioFormatsImage-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save BioFormatsImage for alabaster — saveObject,BioFormatsImage-method","text":"x saved path NULL invisibly returned.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-BioFormatsImage-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save BioFormatsImage for alabaster — saveObject,BioFormatsImage-method","text":"","code":"library(SFEData) fp <- tempfile() fsave <- file.path(fp, \"bfi2\") x1 <- XeniumOutput(dataset = \"v1\", file_path = file.path(fp, \"xenium1\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a7d2dee35/xenium1/xenium_lr  sfe <- readXenium(x1) #> >>> Cell segmentations are found in `.csv` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making POLYGON geometries #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 16324 cells with counts > 0 #> >>> filtering nucSeg geometries to match 16324 cells with counts > 0 bfi <- getImg(sfe) saveObject(bfi, fsave) bfi2 <- readObject(fsave) unlink(fsave, recursive = TRUE)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-ExtImage-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Save ExtImage to disk for alabaster — saveObject,ExtImage-method","title":"Save ExtImage to disk for alabaster — saveObject,ExtImage-method","text":"Save ExtImage disk alabaster","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-ExtImage-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save ExtImage to disk for alabaster — saveObject,ExtImage-method","text":"","code":"# S4 method for class 'ExtImage' saveObject(x, path, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-ExtImage-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save ExtImage to disk for alabaster — saveObject,ExtImage-method","text":"x Bioconductor object specified class. path String containing path directory save x. ... Extra arguments passed writeImage.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-ExtImage-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save ExtImage to disk for alabaster — saveObject,ExtImage-method","text":"x saved path NULL invisibly returned.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-ExtImage-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save ExtImage to disk for alabaster — saveObject,ExtImage-method","text":"","code":"library(SFEData) fp <- tempfile() fsave <- file.path(fp, \"exi\") x1 <- XeniumOutput(dataset = \"v1\", file_path = file.path(fp, \"xenium1\")) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a400df089/xenium1/xenium_lr  sfe <- readXenium(x1) #> >>> Cell segmentations are found in `.csv` file(s) #> >>> Reading cell and nucleus segmentations #> >>> Making POLYGON geometries #> >>> Checking polygon validity #> >>> Saving geometries to parquet files #> >>> Reading cell metadata -> `cells.csv` #> >>> Reading h5 gene count matrix #> >>> filtering cellSeg geometries to match 16324 cells with counts > 0 #> >>> filtering nucSeg geometries to match 16324 cells with counts > 0 bfi <- getImg(sfe) exi <- toExtImage(bfi) #> Resolution subscript out of bound, reading the lowest resolution saveObject(exi, fsave) exi2 <- readObject(fsave) unlink(fsave, recursive = TRUE)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatRaster-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Save SpatRaster to disk for alabaster — saveObject,SpatRaster-method","title":"Save SpatRaster to disk for alabaster — saveObject,SpatRaster-method","text":"Intended SpatRasterImage really SpatRaster also inherits SPE's SpatialImage. Besides writeRaster, function also writes metadata file alabaster framework. image loaded memory original file already spatially registered, e.g. spatial extent, original file copied pre-defined place -disk representation SFE writeRaster called.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatRaster-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save SpatRaster to disk for alabaster — saveObject,SpatRaster-method","text":"","code":"# S4 method for class 'SpatRaster' saveObject(x, path, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatRaster-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save SpatRaster to disk for alabaster — saveObject,SpatRaster-method","text":"x Bioconductor object specified class. path String containing path directory save x. ... Extra parameters passed writeRaster.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatRaster-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save SpatRaster to disk for alabaster — saveObject,SpatRaster-method","text":"x saved path NULL invisibly returned.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatRaster-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save SpatRaster to disk for alabaster — saveObject,SpatRaster-method","text":"","code":"library(SFEData) fp <- tempfile() fn <- file.path(fp, \"vizgen\") d <- VizgenOutput(dataset = \"cellpose\", file_path = fn) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a8941029/vizgen/vizgen_cellbound_Cellpose  suppressWarnings(sfe <- readVizgen(d)) #> >>> 1 `.parquet` files exist: #> /tmp/Rtmp6uS36k/file1043a8941029/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> using -> /tmp/Rtmp6uS36k/file1043a8941029/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> Cell segmentations are found in `.parquet` file #> Sanity checks on cell segmentation polygons: #> >>> ..found 1 cells with (nested) polygon lists #> >>> ..applying filtering #> >>> Casting MULTIPOLYGON geometry to POLYGON #> >>> Checking polygon validity img <- getImg(sfe) class(img) #> [1] \"SpatRasterImage\" #> attr(,\"package\") #> [1] \"SpatialFeatureExperiment\" fsave <- file.path(fp, \"img\") saveObject(img, fsave) img2 <- readObject(fsave)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatialFeatureExperiment-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","title":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","text":"Save SFE objects disk interoperable, language agnostic format may also facilitate memory operations via HDF5 (non-spatial, inherited alabaster.sce) Apache Parquet (geometries).","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatialFeatureExperiment-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","text":"","code":"# S4 method for class 'SpatialFeatureExperiment' saveObject(x, path, ...)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatialFeatureExperiment-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","text":"x Bioconductor object specified class. path String containing path directory save x. ... Additional named arguments pass specific methods.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatialFeatureExperiment-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","text":"x saved path NULL invisibly returned.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatialFeatureExperiment-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","text":"new arguments ... SFE, SpatialExperiment, SingleCellExperiment methods, argument can specified ... SummarizedExperiment method saveObject. present, spatial results featureData geometries dimension reductions (see colFeatureData) parameters spatial analyses (see getParams) save parts SFE object experimental subject change. colFeatureData global spatial results stored columns colData(x) saved alabaster saveObject method DataFrame.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-SpatialFeatureExperiment-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a SpatialFeatureExperiment object — saveObject,SpatialFeatureExperiment-method","text":"","code":"library(SpatialFeatureExperiment) library(Voyager) library(SFEData) library(SingleCellExperiment) #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘matrixStats’ #> The following object is masked from ‘package:alabaster.base’: #>  #>     anyMissing #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: ‘generics’ #> The following objects are masked from ‘package:base’: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: ‘BiocGenerics’ #> The following object is masked from ‘package:SpatialFeatureExperiment’: #>  #>     saveRDS #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, is.unsorted, lapply, #>     mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     rank, rbind, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians #> The following object is masked from ‘package:alabaster.base’: #>  #>     anyMissing library(scater) #> Loading required package: scuttle #> Loading required package: ggplot2 #>  #> Attaching package: ‘ggplot2’ #> The following object is masked from ‘package:SpatialFeatureExperiment’: #>  #>     unit  fp <- tempfile() fn <- file.path(fp, \"vizgen\") d <- VizgenOutput(dataset = \"cellpose\", file_path = fn) #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> The downloaded files are in /tmp/Rtmp6uS36k/file1043a5a6866ff/vizgen/vizgen_cellbound_Cellpose  suppressWarnings(sfe1 <- readVizgen(d, add_molecules = TRUE)) #> >>> 1 `.parquet` files exist: #> /tmp/Rtmp6uS36k/file1043a5a6866ff/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> using -> /tmp/Rtmp6uS36k/file1043a5a6866ff/vizgen/vizgen_cellbound_Cellpose/Cellpose/cellpose_micron_space.parquet #> >>> Cell segmentations are found in `.parquet` file #> Sanity checks on cell segmentation polygons: #> >>> ..found 1 cells with (nested) polygon lists #> >>> ..applying filtering #> >>> Casting MULTIPOLYGON geometry to POLYGON #> >>> Checking polygon validity #> >>> Reading transcript coordinates #> >>> Converting transcript spots to geometry #> >>> Writing reformatted transcript spots to disk  colGraph(sfe1, \"knn5\") <- findSpatialNeighbors(sfe1, method = \"knearneigh\", k = 5) SpatialFeatureExperiment::centroids(sfe1)$foo <- rnorm(ncol(sfe1)) sfe1 <- logNormCounts(sfe1) sfe1 <- runMoransI(sfe1, colGraphName = \"knn5\") sfe1 <- colDataMoransI(sfe1, features = c(\"transcript_count\", \"anisotropy\",                                            \"perimeter_area_ratio\", \"solidity\")) sfe1 <- colGeometryMoransI(sfe1, colGeometryName = \"centroids\", features = \"foo\") sfe1 <- runPCA(sfe1, ncomponents = 10) sfe1 <- reducedDimMoransI(sfe1, components = 1:10)  sfe1 <- runUnivariate(sfe1, type = \"localmoran\", features = rownames(sfe1)[1])  fsave <- file.path(fp, \"sfe_vizgen\") saveObject(sfe1, fsave) #> >>> Saving SpatialExperiment #> >>> Saving colgeometries #> >>> Saving rowgeometries #> >>> Saving localResults #> >>> Saving spatial graphs sfe2 <- readObject(fsave) #> >>> Reading SpatialExperiment #> >>> Reading colgeometries #> >>> Reading rowgeometries #> >>> Reading spatial graphs #> >>> Reading localResults  unlink(fsave, recursive = TRUE)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-sf-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Save sf to disk for alabaster — saveObject,sf-method","title":"Save sf to disk for alabaster — saveObject,sf-method","text":"sf data frames saved GeoParquet.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-sf-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save sf to disk for alabaster — saveObject,sf-method","text":"","code":"# S4 method for class 'sf' saveObject(x, path)"},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-sf-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save sf to disk for alabaster — saveObject,sf-method","text":"x Bioconductor object specified class. path String containing path directory save x.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-sf-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save sf to disk for alabaster — saveObject,sf-method","text":"x saved path NULL invisibly returned.","code":""},{"path":"https://pachterlab.github.io/alabaster.sfe/reference/saveObject-sf-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save sf to disk for alabaster — saveObject,sf-method","text":"","code":"library(sf) fp <- tempfile() df <- as.data.frame(matrix(rnorm(10), ncol = 2)) df <- st_as_sf(df, coords = names(df), crs = NA) saveObject(df, path = fp)"},{"path":"https://pachterlab.github.io/alabaster.sfe/news/index.html","id":"alabastersfe-0990-2024-11-08","dir":"Changelog","previous_headings":"","what":"alabaster.sfe 0.99.0 (2024-11-08)","title":"alabaster.sfe 0.99.0 (2024-11-08)","text":"Initial Bioconductor submission.","code":""}]
